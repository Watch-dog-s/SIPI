openapi: 3.0.0
info:
  title: SIPI API
  description: API documentation for SIPI project
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateMarkDTO:
      type: object
      required:
        - workId
        - value
      properties:
        workId:
          type: integer
          format: int64
        value:
          type: number
          format: double

    CreateSubjectDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    CreateWorkDTO:
      type: object
      required:
        - type
        - subjectId
      properties:
        description:
          type: string
          nullable: true
        type:
          type: string
        subjectId:
          type: integer
          format: int64

    Mark:
      type: object
      properties:
        workId:
          type: integer
          format: int64
        value:
          type: number
          format: double

    Subject:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    Work:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dateTime:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        type:
          type: string
        studentId:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        workId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        dateTime:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
          format: email

    AuthResponse:
      type: object
      properties:
        token:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

paths:
  /api/v1/mark:
    post:
      summary: Create a new mark
      security:
        - BearerAuth: []
      tags:
        - Mark
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMarkDTO'
      responses:
        '200':
          description: Mark created successfully
        '401':
          description: Unauthorized
    put:
      summary: Update a mark
      security:
        - BearerAuth: []
      tags:
        - Mark
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMarkDTO'
      responses:
        '200':
          description: Mark updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Mark not found

  /api/v1/mark/{id}:
    get:
      summary: Get mark by ID
      security:
        - BearerAuth: []
      tags:
        - Mark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Mark found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mark'
        '401':
          description: Unauthorized
        '404':
          description: Mark not found
    delete:
      summary: Delete a mark by ID
      security:
        - BearerAuth: []
      tags:
        - Mark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Mark deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Mark not found

  /api/v1/mark/subject/{id}:
    get:
      summary: Get marks by subject ID
      security:
        - BearerAuth: []
      tags:
        - Mark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Marks found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mark'
        '401':
          description: Unauthorized
        '404':
          description: Subject not found

  /api/v1/mark/subject/{id}/avg:
    get:
      summary: Get average mark for subject
      security:
        - BearerAuth: []
      tags:
        - Mark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Average mark found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mark'
        '401':
          description: Unauthorized
        '404':
          description: Subject not found

  /api/v1/subject:
    post:
      summary: Create a new subject
      security:
        - BearerAuth: []
      tags:
        - Subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubjectDTO'
      responses:
        '200':
          description: Subject created successfully
        '401':
          description: Unauthorized
    put:
      summary: Update a subject
      security:
        - BearerAuth: []
      tags:
        - Subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubjectDTO'
      responses:
        '200':
          description: Subject updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Subject not found

  /api/v1/subject/{id}:
    delete:
      summary: Delete a subject by ID
      security:
        - BearerAuth: []
      tags:
        - Subject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Subject deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Subject not found

  /api/v1/subject/all:
    get:
      summary: Get all subjects
      security:
        - BearerAuth: []
      tags:
        - Subject
      responses:
        '200':
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '401':
          description: Unauthorized

  /api/v1/work:
    post:
      summary: Create a new work
      security:
        - BearerAuth: []
      tags:
        - Work
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkDTO'
      responses:
        '200':
          description: Work created successfully
        '401':
          description: Unauthorized
    put:
      summary: Update a work
      security:
        - BearerAuth: []
      tags:
        - Work
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkDTO'
      responses:
        '200':
          description: Work updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Work not found

  /api/v1/work/{id}:
    get:
      summary: Get work by ID
      security:
        - BearerAuth: []
      tags:
        - Work
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Work found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '401':
          description: Unauthorized
        '404':
          description: Work not found
    delete:
      summary: Delete a work by ID
      security:
        - BearerAuth: []
      tags:
        - Work
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Work deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Work not found

  /api/v1/comment/work/{id}:
    get:
      summary: Get comments for work
      security:
        - BearerAuth: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Comments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized

  /api/v1/comment/user/{id}:
    get:
      summary: Get comments for user
      security:
        - BearerAuth: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Comments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized

  /api/v1/comment/user:
    get:
      summary: Get personal comments
      security:
        - BearerAuth: []
      tags:
        - Comment
      responses:
        '200':
          description: Comments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized

  /api/v1/comment/user/personal:
    get:
      summary: Get personal comments added by me
      security:
        - BearerAuth: []
      tags:
        - Comment
      responses:
        '200':
          description: Comments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized

  /api/v1/comment:
    post:
      summary: Create a new comment
      security:
        - BearerAuth: []
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment created successfully
        '401':
          description: Unauthorized
    put:
      summary: Update a comment
      security:
        - BearerAuth: []
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Comment not found

  /api/v1/comment/{id}:
    delete:
      summary: Delete a comment by ID
      security:
        - BearerAuth: []
      tags:
        - Comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Comment not found

  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/token:
    get:
      summary: Get user ID by token
      security:
        - BearerAuth: []
      tags:
        - Authentication
      responses:
        '200':
          description: User ID
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 